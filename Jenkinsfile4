pipeline {
    agent any
        stages {
            stage('Build') {
                steps {
                    sh 'mvn -B package'
                }
            }

            stage('SonarQube analysis') {
                environment {
                    SCANNER_HOME = tool 'SonarQube Conexion'
                }

                steps {
                    withSonarQubeEnv(credentialsId: 'a2c2c4b5-1b76-4582-a592-1c52827c2c20', installationName: 'SonarQube') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectKey=NewSpringMvcRest \
                    -Dsonar.projectName=Trabajo Grupal Modulo 3 \
                    -Dsonar.sources=src/main,src/test \
                    -Dsonar.java.binaries=target/classes/ \
                    -Dsonar.exclusions=src/test/java/****/*.java \
                    -Dsonar.exclusions=src/main/java/**/*.java \
                    -Dsonar.exclusions=src/main/java/**/*.java,src/test/java/**/*.java \
                    -Dsonar.projectVersion=${BUILD_NUMBER}-${GIT_COMMIT_SHORT}'''
                    }
                }
            }
                                
            stage("Publish to Nexus Repository Manager") {
                steps {
                    script {
                        pom = readMavenPom file: "pom.xml";
                        filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                        echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                        artifactPath = filesByGlob[0].path;
                        artifactExists = fileExists artifactPath;
                        if(artifactExists) {
                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                            nexusArtifactUploader(
                                nexusVersion: "nexus3",
                                protocol: "http",
                                nexusUrl: "localhost:8081",
                                groupId: com.journaldev,
                                version: 1.0,
                                repository: "repositorioTGrupoM3",
                                credentialsId: "nexuscredenciales",
                                artifacts: [
                                    [artifactId: SpringRestExample,
                                    classifier: '',
                                    file: target/SpringRestExample-1.0.war,
                                    type: '']
                                ]
                            );
                        } else {
                            error "*** File: ${artifactPath}, could not be found";
                        }
                    }
                }
            }
        }

    post{
        failure{
            slackSend( channel: "#devops", token: "SecretSlack", color: "good", message: "${custom_msg()}")
        }
    }
}

def custom_msg()
    {
        def JENKINS_URL= "localhost:8080"
        def JOB_NAME = env.JOB_NAME
        def BUILD_ID= env.BUILD_ID
        def JENKINS_LOG= " FAILED: Job [${env.JOB_NAME}] Logs path: ${JENKINS_URL}/job/${JOB_NAME}/${BUILD_ID}/consoleText"
        return JENKINS_LOG
}